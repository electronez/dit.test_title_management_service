// <auto-generated />
using System;
using DIT.Test_Title_Management_Service.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DIT.Test_Title_Management_Service.Persistence.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Titles.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid")
                        .HasColumnName("title_id");

                    b.HasKey("Id")
                        .HasName("pk_chapters");

                    b.HasIndex("TitleId")
                        .HasDatabaseName("ix_chapters_title_id");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Titles.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_titles");

                    b.ToTable("titles", (string)null);
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Workers.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<int[]>("Roles")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("roles");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_workers");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_workers_username");

                    b.ToTable("workers", (string)null);
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Workers.WorkerAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uuid")
                        .HasColumnName("chapter_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid")
                        .HasColumnName("title_id");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id")
                        .HasName("pk_worker_assignments");

                    b.HasIndex("ChapterId")
                        .HasDatabaseName("ix_worker_assignments_chapter_id");

                    b.HasIndex("TitleId")
                        .HasDatabaseName("ix_worker_assignments_title_id");

                    b.HasIndex("WorkerId")
                        .HasDatabaseName("ix_worker_assignments_worker_id");

                    b.ToTable("worker_assignments", (string)null);
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Titles.Chapter", b =>
                {
                    b.HasOne("DIT.Test_Title_Management_Service.Domain.Titles.Title", "Title")
                        .WithMany("Chapters")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapters_titles_title_id");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Titles.Title", b =>
                {
                    b.OwnsOne("DIT.Test_Title_Management_Service.Domain.Titles.TitleName", "Name", b1 =>
                        {
                            b1.Property<Guid>("TitleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("EnglishName")
                                .HasColumnType("text")
                                .HasColumnName("english_name");

                            b1.Property<string>("LocalizedName")
                                .HasColumnType("text")
                                .HasColumnName("localized_name");

                            b1.Property<string>("OriginalName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("original_name");

                            b1.HasKey("TitleId");

                            b1.ToTable("titles", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TitleId")
                                .HasConstraintName("fk_titles_titles_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Workers.Worker", b =>
                {
                    b.OwnsOne("DIT.Test_Title_Management_Service.Domain.Workers.Profile", "Profile", b1 =>
                        {
                            b1.Property<Guid>("WorkerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.HasKey("WorkerId");

                            b1.ToTable("workers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WorkerId")
                                .HasConstraintName("fk_workers_workers_id");
                        });

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Workers.WorkerAssignment", b =>
                {
                    b.HasOne("DIT.Test_Title_Management_Service.Domain.Titles.Chapter", null)
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_worker_assignments_chapters_chapter_id");

                    b.HasOne("DIT.Test_Title_Management_Service.Domain.Titles.Title", null)
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_worker_assignments_titles_title_id");

                    b.HasOne("DIT.Test_Title_Management_Service.Domain.Workers.Worker", null)
                        .WithMany("Assignments")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_worker_assignments_workers_worker_id");
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Titles.Title", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("DIT.Test_Title_Management_Service.Domain.Workers.Worker", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
